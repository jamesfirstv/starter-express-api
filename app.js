const CyclicDB = require('cyclic-dynamodb')
//const db = CyclicDB('your-table-name')
console.log('ok!')

/*
const run = async function(){
    let animals = db.collection('animals')

    // create an item in collection with key "leo"
    let leo = await animals.set('leo', {
        type:'cat',
        color:'orange'
    })

    // get an item at key "leo" from collection animals
    let item = await animals.get('leo')
    console.log(item)
}
run()
*/

/*
const MTProto  = require('@mtproto/core')
const tempStor = require('@mtproto/core/src/storage/temp')
const api_id   = YOU_API_ID
const api_hash = YOU_API_HASH
const mtproto  = new MTProto({
  api_id, api_hash,
  storageOptions: {instance: tempStor}
})


// 2. Print the user country code
mtproto.call('help.getNearestDc').then(result => {
  console.log('country:', result.country)
})
*/




/*
// –ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
function main(msg) {
  if (msg.match('–ß–∞—Ç –ª–∞–≥–µ—Ä—è'))
    return 'üèò–í –ù—å—é-–†–∏–Ω–æ'

  if (msg.match('—É—é—Ç–Ω—ã–π –≥–æ—Ä–æ–¥ –†–∏–Ω–æ,'))
    return '/eat1<#>/eat1<#>/eat1<#>üë£–ü—É—Å—Ç–æ—à—å'

  if (msg.match('–≤ —ç—Ç–æ—Ç —Ä–∞–∑ —É–∂–µ –±—É–∫–≤–∞–ª—å–Ω–æ.'))
    return '‚õ∫Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è<#>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å'

  if (
    msg.match('–¢–≤–æ–π –ø—É—Ç—å –ø—Ä–µ–≥—Ä–∞–¥–∏–ª –∏—Å–ø–æ–ª–∏–Ω—Å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –º–æ–Ω—Å—Ç—Ä.')
    || msg.match('–≤ —ç—Ç–æ—Ç —Ä–∞–∑ —Ç—ã –Ω–µ –ø–æ–ª—É—á–∏–ª —Å–¥–∞—á–∏.')
  ) return '‚öîÔ∏è–ê—Ç–∞–∫–æ–≤–∞—Ç—å'

  if (
    msg.match('üìØüö∑ ‚ù§Ô∏è')
    || msg.match('üìØ‚ù§Ô∏è')
  ) return '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ'

  if (
    msg.match('–¢—ã –Ω–µ —Å–º–æ–∂–µ—à—å —É–≤–∏–ª—å–Ω—É—Ç—å –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞')
    || msg.match('–¢–µ–±–µ –Ω–µ —É–π—Ç–∏ –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞')
    || msg.match('–í–æ –≤—Ä–µ–º—è –≤—ã–ª–∞–∑–∫–∏ –Ω–∞ —Ç–µ–±—è –Ω–∞–ø–∞–ª')
  ) return '‚öîÔ∏è–î–∞—Ç—å –æ—Ç–ø–æ—Ä'

  let parse = msg.match(/üö∑[\s\S]*üë£(\d+)–∫–º/)
  if (parse) parse = actPath(parse, false)
  if (parse) return parse
//  parse = msg.match(/üö∑.*(\d+)–∫–º/)
//  if (parse) parse = actPath(parse, false)
//  if (parse) return parse
//  parse = msg.match(/üë£(\d+)–∫–º/)
//  if (parse) parse = actPath(parse)
//  if (parse) return parse
  parse = msg.match(/üö∑.*(\d+)\s?–∫–º/)
  if (parse) parse = actPath(parse, false)
  if (parse) return parse
  parse = msg.match(/üë£(\d+)\s?–∫–º/)
  if (parse) parse = actPath(parse)
  if (parse) return parse


  if (msg.match('–¢—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª –±—Ä–æ–¥—è—á–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—Ü–∞,'))
    return '/buy_5i<#>/view'

  if (
    msg.match('–¢—ã –æ—Ü–µ–Ω–∏–ª –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –≤–æ–∫—Ä—É–≥.')
    || msg.match('–¢—ã –æ–≥–ª—è–¥–µ–ª—Å—è –≤–æ–∫—Ä—É–≥ —Å–µ–±—è.')
    || msg.match('–†–µ–π–¥ –≤ 01:00')
    || msg.match('–†–µ–π–¥ –≤ 9:00')
    || msg.match('–†–µ–π–¥ –≤ 17:00')
  )
    return 'üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ'

  if (
    msg.match('–¢—ã —Å—ä–µ–ª ')
    || msg.match('/view')
    || msg.match('–¢—ã –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É!')
    || msg.match('–¢—ã –≥–æ—Ç–æ–≤ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ü—É—Å—Ç–æ—à—å!')
    || msg.match(' –∏ –µ–≥–æ')
    || msg.match('—Å –≤–∏–¥—É –∑–≤–µ—Ä—å–∫–∞. –≠—Ç–æ –±—ã–ª –∫–æ—Ç,')
    || msg.match('‚Äî –ö–∏—Å-–∫–∏—Å-–∫–∏—Å..')
    || msg.match('\nüêê')
    || msg.match('\sü§ò')
    || msg.match('(–±–µ–∑ –±–∞–Ω–¥—ã)')
    || msg.match('–≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n üï≥+')
    || msg.match('–¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä\n üï≥+')
  ) return '/view'

  if (msg.match('–¢—ã –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–µ–Ω.'))
    return '/myfood'
  parse = msg.match(/\/use_1[0-2]\d/g)
  if (parse) return parse[0]

  
  if (msg.match('/dl_'))
    return actClean(msg)
  parse = msg.match(/\/del_\d+/)
  if (parse)
    return parse[0]
}

// --------------------
// –í–µ—Ç–∫–∞ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–∞
function actPath(parse, light=true) {
  let x = Number(parse[1])

  if (light) {
    switch (x) {
      case 2: return 'üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ'
      case 22: return 'üö∑–í –¢–µ–º–Ω—É—é –∑–æ–Ω—É'
      case 27: return 'üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ'
      case 11: return '–°—Ç–∞—Ä–∞—è —à–∞—Ö—Ç–∞<#>–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ'
      case 40: return '/eq_54<#>/eq_73'
      case 45: return 'üåÅ–í—ã—Å–æ–∫–∏–π –•—Ä–æ—Ç–≥–∞—Ä<#>–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ'
      case 50: return 'üõë–†—É–∏–Ω—ã –ì–µ–∫—Å–∞–≥–æ–Ω–∞<#>–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ'
      case 51: return 'üõè–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–∏–≤–∞–ª<#>/deeprest'
      case 52: return 'üö∑–í –¢–µ–º–Ω—É—é –∑–æ–Ω—É'
//      case 50: return '/mystuff'
//      case 54: return '/voevat_suda'
      case 68: case 69: return '‚õ∫Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è<#>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å'
      default: return false
    }
  } else {
    switch (x) {
      case 56: return 'üî¨–ù–∞—É—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å<#>–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ'
//      case 39: return 'ü¶á–ë—ç—Ç-–ø–µ—â–µ—Ä–∞<#>–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ'
      case 23: return 'üöΩ–°—Ç–æ—á–Ω–∞—è —Ç—Ä—É–±–∞<#>–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ'
      default: return false
    }
  }
}

// --------------------
// –í–µ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏
function actClean(msg) {
  const badGoods = [
    'BFGzzv-4000',
    '–ë–æ–µ–≤–∞—è –±—Ä–æ–Ω—è',
    '–ë—Ä–æ–Ω—è –±—Ä–∞—Ç—Å—Ç–≤–∞',
    '–ö–∏–Ω–∂–∞–ª',
    '–ö–æ–∂–∞–Ω–Ω—ã–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫',
    '–ö–æ–∂–∞–Ω—ã–π –∂–∏–ª–µ—Ç',
    '–¢–∏—Ç–∞–Ω–æ–≤—ã–µ —â–∏—Ç–∫–∏',
    '–ú–∞—á–µ—Ç–µ',
    '–®–∏–ø–∞—Å—Ç–∞—è –±–∏—Ç–∞',
    '–õ–∞–∑–µ—Ä–Ω—ã–π —Ç–µ—Å–∞–∫',
    '–ú–æ—Ç–æ-–∑–∞—â–∏—Ç–∞',
    '–ü–ª–æ—Ç–Ω—ã–π –∫–∞–ø—é—à–æ–Ω',
    '–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑',
    '–°—É–ø–µ—Ä–º–æ–ª–æ—Ç',
    '–§–∞–ª–º–µ—Ä—Å–∫–∏–π –∫–ª–∏–Ω–æ–∫',
    '–§—É—Å—Ä–æ–Ω–µ—Ç',
    '–£—à–∞–Ω–∫–∞',
    '–í—è–∑–∞–Ω–∞—è —à–∞–ø–∫–∞',
    '–•–ª—ã—Å—Ç',
    '–≠–ª–µ–∫—Ç—Ä–æ–º–µ—á'
  ]
//
  let parse
  for (let i=0; i<badGoods.length; i++) {
    parse = msg.match(new RegExp(badGoods[i]+'.*(\\/dl_\\d+)'))
    if (parse) break
  }
  if (parse) return parse[1]
}

// ====================
// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
const express    = require("express")
const bodyParser = require("body-parser")
const app        = express()
app.use(bodyParser.urlencoded({ extended: false }))
app.use(bodyParser.json())
app.all('*', (req, res) => {
  let msg = req.body.query.message
  console.log('–†–µ—Å–ø–æ–Ω–¥–µ—Ä –ø—Ä–∏—Å–ª–∞–ª:\n' + msg + '\n---\n')
  let ans = main(msg)
  console.log('–ú—ã –æ—Ç–≤–µ—á–∞–µ–º: ' + ans + '\n---\n')
  res.send(JSON.stringify({"replies": [{"message": ans}]}))
})
app.listen(process.env.PORT || 3000)
*/

